/* Additional includes go here */

#include "splpy.h"
#include "splpy_funcop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::implementationPrologue($model);%>

@include "../../opt/python/codegen/pysplenablecheckpointing.cgt"
@include "../pyspltuple.cgt"

<%

# Configure Windowing
 my $inputPort = $model->getInputPortAt(0); 
 my $window = $inputPort->getWindow();
 my $windowCppInitializer = SPL::CodeGen::getWindowCppInitializer($window,"PyObject *");

 # Select the Python wrapper function
 my $pyoutstyle = splpy_tuplestyle($model->getOutputPortAt(0));

 my $out_pywrapfunc=  'object_in__' . $pyoutstyle . '_out';
%>

#define SPLPY_AGGREGATE(f, v, r, occ) \
    streamsx::topology::Splpy::pyTupleMap(f, v, r)

// Constructor
MY_OPERATOR::MY_OPERATOR() :
   funcop_(NULL),
   pyInStyleObj_(NULL),
   loads(NULL),
   occ_(-1),
   window_(<%=$windowCppInitializer%>)
{
<% if ($window->isSliding()) {%>
    window_.registerOnWindowTriggerHandler(this);
    window_.registerAfterTupleEvictionHandler(this);
<%}%>
<% if ($window->isTumbling()) {%>
    window_.registerBeforeWindowFlushHandler(this);
<%}%>

    const char * out_wrapfn = "<%=$out_pywrapfunc%>";
<%
# If occ parameter is positive then pass-by-ref is possible
# Generate code to allow pass by ref but only use when
# not connected to a PE output port.

 my $oc = $model->getParameterByName("outputConnections");

 if ($oc) {
    my $occ = $oc->getValueAt(0)->getSPLExpression();
    if ($occ > 0) {
        my $pybyrefwrapfunc = 'object_in__object_out';
%>

#undef SPLPY_AGGREGATE
#define SPLPY_AGGREGATE(f, v, r, occ) \
    streamsx::topology::Splpy::pyTupleMapByRef(f, v, r, occ)

    if (!this->getOutputPortAt(0).isConnectedToAPEOutputPort()) {
       // pass by reference
       out_wrapfn = "<%=$pybyrefwrapfunc%>";
       occ_ = <%=$occ%>;
    }
<%
    } 
 }
%>

    funcop_ = new SplpyFuncOp(this, out_wrapfn);

@include "../pyspltuple_constructor.cgt"
    
    // Obtain the function that loads the tuple's value in process()
    {
    SplpyGIL lock;
    <%if ($pystyle eq 'pickle'){%>
    loads = SplpyGeneral::loadFunction("pickle", "loads");
    <% } elsif ($pystyle eq 'json'){ %>
    loads = SplpyGeneral::loadFunction("json", "loads");
    <% } %>
    }

}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  delete funcop_;

  <% if (($pystyle eq 'json') || ($pystyle eq 'pickle')) {%>
  {
      SplpyGIL lock;
      if (loads != NULL){
      	 Py_DECREF(loads);
      }
  }
  <% } %>
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    AutoLock stateLock(funcop_);
    funcop_->prepareToShutdown();
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
@include "../pyspltuple2value.cgt"

  AutoLock stateLock(funcop_);

  PyObject *python_value;

  // If the input style is pickle,

  // None of the streamsx::topology methods in this scope grab the lock
  // so we need to do it here.
  
  <%if ($pystyle eq 'pickle'){%>

      unsigned char const *data = value.getData();
      unsigned char fmt = *data;
      if (fmt == STREAMSX_TPP_PTR) {
          __SPLTuplePyPtr *stp = (__SPLTuplePyPtr *)(data);
          python_value = stp->pyptr;
      }
      // Anything ASCII is also Pickle (Python 2 default format)
      else if (fmt <= STREAMSX_TPP_PICKLE) {
      	  // This is a pickled value. Need to depickle it.
	  {
	      SplpyGIL lock; 
              python_value = pySplValueToPyObject(value);

	      // Depickle the tuple.
	      PyObject *tup = PyTuple_New(1);
	      PyTuple_SET_ITEM(tup, 0, python_value);
   	      python_value = SplpyGeneral::pyCallObject(loads, tup);

	  } // End SplpyGIL lock
      }
  <% } elsif ($pystyle eq 'string'){%>
      {
	  SplpyGIL lock;
          python_value = pySplValueToPyObject(value);
      }
  <% } elsif ($pystyle eq 'json'){%>
      {
      	  SplpyGIL lock;
          python_value = pySplValueToPyObject(value);
	  PyObject *tup = PyTuple_New(1);
	  PyTuple_SET_ITEM(tup, 0, python_value);
	  python_value = SplpyGeneral::pyCallObject(loads, tup);
      }
  <% } elsif ($pystyle eq 'dict' || $pystyle eq 'tuple' || $pystyle_nt) {%>
      python_value = value;
 <% } else{
	  SPL::CodeGen::exitln($pystyle . " is an unsupported input type.");      
    }
 %>


  window_.insert(python_value);
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
<% if ($window->isTumbling()) {%>
   // Aggregate the remaining contents if there are some.
   if (punct == Punctuation::FinalMarker) {
       SPL::AutoWindowDataAcquirer<PyObject *> awd(window_);
       Window<PyObject *>::StorageType & storage = window_.getWindowStorage();
       Window<PyObject *>::DataType & content = storage[0];
       if (content.size() > 0)
            onWindowTriggerEvent(window_, 0);
   }
<%}%>
}


// ##############################
// Window Event Handler Overrides
// ##############################


void MY_OPERATOR::afterTupleEvictionEvent(
     Window<PyObject *> & window,  Window<PyObject *>::TupleType & tuple,  Window<PyObject *>::PartitionType const & partition) {
     // Drop reference to tuple after it is removed from the window.
     SplpyGIL lock;
     Py_DECREF(tuple);
}

void MY_OPERATOR::onWindowTriggerEvent(Window<PyObject *> & window, Window<PyObject *>::PartitionType const & key){    
    Window<PyObject *>::StorageType & storage = window.getWindowStorage();

    Window<PyObject *>::DataType & content = storage[key];
    PyObject *items;
    {
    SplpyGIL lock;
    items = PyList_New(content.size());
    unsigned int idx = 0;
    for(WindowType::DataType::iterator it=content.begin(); it!=content.end(); ++it) {
        PyObject *item = *it;
	// The tuple steals a reference, increment such that the window can maintain a copy
	// once the tuple is deleted.
	Py_INCREF(item);
	PyList_SET_ITEM(items, idx, item);
	++idx;
    }
    }
  OPort0Type otuple;

  try {
  
  if (SPLPY_AGGREGATE(funcop_->callable(), items,
       otuple.get_<%=$model->getOutputPortAt(0)->getAttributeAt(0)->getName()%>(), occ_)){  
     submit(otuple, 0);
  }
  } catch (const streamsx::topology::SplpyExceptionInfo& excInfo) {
     SPLPY_OP_HANDLE_EXCEPTION_INFO_GIL(excInfo);
     return;
  }
  submit(Punctuation::WindowMarker, 0);
}

// ##################################
// End Window Event Handler Overrides
// ##################################


namespace SPL{
    Checkpoint & operator <<(Checkpoint &ostr, const PyObject  & obj){
        return ostr;
    }

    Checkpoint & operator >>(Checkpoint &ostr, const PyObject  & obj){
        return ostr;
    }

    ByteBuffer<Checkpoint> & operator<<(ByteBuffer<Checkpoint> & ckpt, PyObject * obj){
        return ckpt;
    }


    ByteBuffer<Checkpoint> & operator>>(ByteBuffer<Checkpoint> & ckpt, PyObject * obj){
        return ckpt;
    }

 }

std::ostream & operator <<(std::ostream &ostr, const PyObject  & obj){
    return ostr;
}

std::ostream & operator >>(std::ostream &ostr, const PyObject  & obj){
    return ostr;
}
<%SPL::CodeGen::implementationEpilogue($model);%>
